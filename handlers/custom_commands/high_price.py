from loader import bot
from telebot.types import Message, CallbackQuery
from states.states_for_custom_commands import Info
from keyboards.inline.choice_right_city import city_markup_high
from keyboards.reply.choice_quantity import button_hotels, button_quantity_photo
from keyboards.reply.choice_photo import button_photo
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
from utils.misc.property_request import found_hotels
from keyboards.inline.url_for_hotel import url_markup
from utils.misc.photo_request import take_photo


# @bot.message_handler(commands=['highprice'])
# def answer_low_price(message: Message) -> None:
#     bot.set_state(message.from_user.id, HighInfo.city_high)
#     bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –Ω–∞–π—Ç–∏ –¥–æ—Ä–æ–≥–æ–π –æ—Ç–µ–ª—å')
#

# @bot.message_handler(state=HighInfo.city_high)
# def choice_city(message: Message) -> None:
#     valid = city_markup_high(message.text)
#     if valid:
#         bot.send_message(message.from_user.id, '–£—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!', reply_markup=valid)
#
#     else:
#         bot.send_message(message.chat.id, '–Ø —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ –∑–Ω–∞—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!\n'
#                                           '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥')
#         bot.set_state(message.from_user.id, HighInfo.city_high)
#
#
# @bot.callback_query_handler(func=lambda call: call.data.startswith('Hcity_id'))
# def check_callback_high(callback: CallbackQuery) -> None:
#     with bot.retrieve_data(callback.from_user.id, callback.message.chat.id) as data:
#         data['city_id'] = callback.data[8:]
#     bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text='–ü—Ä–∏–Ω—è—Ç–æ!')
#     bot.send_message(callback.message.chat.id, '–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å?\n'
#                                                '–û—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å <b>–Ω–µ –±–æ–ª—å—à–µ 5</b>', reply_markup=button_hotels(),
#                      parse_mode='html')
#     bot.set_state(callback.from_user.id, HighInfo.quantity_result_high)
#
#
# @bot.message_handler(state=HighInfo.quantity_result_high)
# def check_quantity_hotels(message: Message) -> None:
#     number = message.text
#
#     if number.isdigit():
#         if 16 > int(number) > 0:
#             with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
#                 data['quantity_hotels'] = number
#             bot.send_message(message.chat.id, '–ü—Ä–∏–Ω—è—Ç–æ! –û—Å—Ç–∞–ª–æ—Å—å —Å–∞–º–∞—è –º–∞–ª–æ—Å—Ç—å üòÅ')
#             bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–µ–ª—è?',
#                              reply_markup=button_photo())
#             bot.set_state(message.from_user.id, HighInfo.photo_high)
#         else:
#             bot.set_state(message.from_user.id, HighInfo.quantity_result_high)
#             bot.send_message(message.chat.id, '–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0, –Ω–æ –º–µ–Ω—å—à–µ 6\n'
#                                               '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ü§ß')
#     else:
#         bot.set_state(message.from_user.id, HighInfo.quantity_result_high)
#         bot.send_message(message.chat.id, '–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —è–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º\n'
#                                           '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ü§ß')
#
#
# @bot.message_handler(state=HighInfo.photo_high)
# def check_photo(message: Message) -> None:
#     if message.text.title().startswith('–î–∞'):
#         bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –Ω–∞ –æ–¥–∏–Ω –æ—Ç–µ–ª—å\n'
#                                           '<b>–Ω–µ –±–æ–ª—å—à–µ 4 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –Ω–æ –Ω–µ –º–µ–Ω—å—à–µ –¥–≤—É—Ö </b>',
#                          reply_markup=button_quantity_photo(), parse_mode='html')
#         with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
#             data['photo'] = True
#         bot.set_state(message.from_user.id, HighInfo.quantity_photo_high)
#
#     elif message.text.title().startswith('–ù–µ—Ç'):
#         with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
#             data['photo'] = False
#             data['filter'] = "PRICE_HIGHEST_FIRST"
#         calendar, step = DetailedTelegramCalendar(calendar_id=1).build()
#         bot.send_message(message.chat.id, '–ù–µ—Ç, —Ç–∞–∫ –Ω–µ—Ç üòï')
#         bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞', reply_markup=calendar)
#     else:
#         bot.set_state(message.from_user.id, HighInfo.photo_high)
#         bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤–∏–¥–∞:\n'
#                                           r'–î–∞\–ù–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É', reply_markup=button_photo())
#
#
# @bot.message_handler(state=HighInfo.quantity_photo_high)
# def check_quantity_photo(message: Message) -> None:
#     number = message.text
#
#     if number.isdigit():
#         if 5 > int(number) > 0:
#             calendar, step = DetailedTelegramCalendar(calendar_id=1).build()
#             with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
#                 data['quantity_photo'] = number
#                 data['filter'] = "PRICE_HIGHEST_FIRST"
#             bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞', reply_markup=calendar)
#         else:
#             bot.set_state(message.from_user.id, HighInfo.quantity_photo_high)
#             bot.send_message(message.chat.id, '–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0, –Ω–æ –º–µ–Ω—å—à–µ 4\n'
#                                               '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ü§ß')
#     else:
#         bot.set_state(message.from_user.id, HighInfo.quantity_photo_high)
#         bot.send_message(message.chat.id, '–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —è–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º\n'
#                                           '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ü§ß')
#
#
# @bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=1))
# def take_data_high_in(callback) -> None:
#     result, key, step1 = DetailedTelegramCalendar(calendar_id=1).process(callback.data)
#     if not result and key:
#         bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞{}".format(LSTEP[step1]),
#                               callback.message.chat.id,
#                               callback.message.message_id,
#                               reply_markup=key)
#     elif result:
#         with bot.retrieve_data(callback.from_user.id, callback.message.chat.id) as data:
#             data['data_in'] = result
#         bot.edit_message_text("–¢–≤–æ–π –≤—ã–±–æ—Ä {}".format(result),
#                               callback.message.chat.id,
#                               callback.message.message_id)
#         calendar1, step2 = DetailedTelegramCalendar(calendar_id=2).build()
#         bot.send_message(callback.message.chat.id, '–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–∞—Ç—É –æ—Ç—ä–µ–∑–¥–∞', reply_markup=calendar1)
#
#
# @bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=2))
# def take_data_high_out(callback) -> None:
#     result, key, step = DetailedTelegramCalendar(calendar_id=2).process(callback.data)
#     if not result and key:
#         bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –æ—Ç—ä–µ–∑–¥–∞{}".format(LSTEP[step]),
#                               callback.message.chat.id,
#                               callback.message.message_id,
#                               reply_markup=key)
#     elif result:
#         with bot.retrieve_data(callback.from_user.id, callback.message.chat.id) as data:
#             data['data_out'] = result
#         bot.edit_message_text("–¢–≤–æ–π –≤—ã–±–æ—Ä {}".format(result),
#                               callback.message.chat.id,
#                               callback.message.message_id)
#         bot.delete_state(callback.from_user.id, callback.message.chat.id)
#
#         bot.send_message(callback.message.chat.id, 'C—É–ø–µ—Ä, —Å–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É –æ—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –ø–æ–¥–æ–π–¥—É—Ç!')
#         querystring = {"destinationId": data['city_id'],
#                        "pageNumber": "1", "pageSize": data['quantity_hotels'],
#                        "checkIn": str(data['data_in']), "checkOut": str(data['data_out']),
#                        "adults1": "1", "sortOrder": data['filter'], "locale": "en_US",
#                        "currency": "USD"}
#
#         hotels = found_hotels(querystring=querystring)
#
#         for hotel in hotels:
#             if data['photo']:
#                 bot.send_media_group(callback.message.chat.id, take_photo(hotel['hotel_id'],
#                                                                           data['quantity_photo']))
#             bot.send_message(callback.message.chat.id, 'üìù –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è: {name}\n'
#                                                        'üöï –ê–¥—Ä–µc: {address}\n'
#                                                        'üë£ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {center}\n'
#                                                        'üí∏ –¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å:{price}\n'
#                                                        'üí∞ {total_price}'.format(
#                                                         name=hotel['hotel_name'], address=hotel['address'],
#                                                         center=hotel['center_distance'], price=hotel['price'],
#                                                         total_price=hotel['total_price']),
#                              reply_markup=url_markup(hotel['url']))
