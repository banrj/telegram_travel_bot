from loader import bot
from telebot.types import Message, CallbackQuery
from states.states_for_custom_commands import Info
from keyboards.inline.choice_right_city import city_markup
from keyboards.reply.choice_quantity import button_hotels, button_quantity_photo
from keyboards.reply.choice_photo import button_photo
from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP
from utils.misc.property_request import found_hotels
from keyboards.inline.url_for_hotel import url_markup
from utils.misc.photo_request import take_photo
from datetime import date, timedelta
from loguru import logger


@bot.message_handler(commands=['lowprice', 'highprice', 'beastdeal'])
def answer_low_price(message: Message) -> None:
    """
    –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ—Ä–æ–¥ –ø–æ–∏—Å–∫–∞ –æ—Ç–µ–ª—è.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    logger.add('debug_in_command.log', level='DEBUG', format="{time} {level} {message}", rotation="5 KB",
               compression="zip")
    logger.debug('Error')
    logger.info('Information message')
    logger.warning('Warning')
    bot.set_state(message.from_user.id, Info.city)
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –Ω–∞–π—Ç–∏ –æ—Ç–µ–ª—å \n'
                                      '(<u>–Ω–∞ —Ä—É—Å—Å–∫–æ–º</u>)', parse_mode='html')
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        if message.text == '/lowprice':
            data['filter'] = "PRICE"
        elif message.text == '/highprice':
            data['filter'] = "PRICE_HIGHEST_FIRST"
        elif message.text == '/beastdeal':
            data['filter'] = "DISTANCE_FROM_LANDMARK"


@bot.message_handler(state=Info.city)
def choice_city(message: Message) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞)
    """
    valid = city_markup(message.text)
    if valid:
        bot.send_message(message.from_user.id, '–£—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!', reply_markup=valid)

    else:
        bot.send_message(message.chat.id, '–Ø —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ –∑–Ω–∞—é, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!\n'
                                          '–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥')
        bot.set_state(message.from_user.id, Info.city)


@bot.callback_query_handler(func=lambda call: call.data.startswith('city_id'))
def check_callback(callback: CallbackQuery) -> None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–∞—á–∞–ª—å–Ω—É—é —Ü–µ–Ω—É(–µ—Å–ª–∏ beastdeal) –∏–ª–∏
    –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π (lowprice or highprice)
    :param callback: –æ—Ç–≤–µ—Ç –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É(—É—Ç–æ—á–Ω–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞)
    """
    with bot.retrieve_data(callback.from_user.id, callback.message.chat.id) as data:
        data['city_id'] = callback.data[7:]
    bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text='–ü—Ä–∏–Ω—è—Ç–æ!')
    if data['filter'] == "DISTANCE_FROM_LANDMARK":
        bot.send_message(callback.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –æ—Ç–µ–ª—è (<u>–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö $</u>)',
                         parse_mode='html')
        bot.set_state(callback.from_user.id, Info.min_price)
    elif data['filter'] == "PRICE_HIGHEST_FIRST" or data['filter'] == "PRICE":
        bot.send_message(callback.message.chat.id, '–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å?\n'
                                                   '–û—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å <b>–Ω–µ –±–æ–ª—å—à–µ 5</b>',
                         reply_markup=button_hotels(),
                         parse_mode='html')
        bot.set_state(callback.from_user.id, Info.quantity_result)


@bot.message_handler(state=Info.quantity_result)
def check_quantity_hotels(message: Message) -> None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ, –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π)
    """
    number = message.text

    if number.isdigit():
        if 16 > int(number) > 0:
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['quantity_hotels'] = number
            bot.send_message(message.chat.id, '–ü—Ä–∏–Ω—è—Ç–æ! –û—Å—Ç–∞–ª–æ—Å—å —Å–∞–º–∞—è –º–∞–ª–æ—Å—Ç—å üòÅ')
            bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç–µ–ª—è?',
                             reply_markup=button_photo())
            bot.set_state(message.from_user.id, Info.photo)
        else:
            bot.set_state(message.from_user.id, Info.quantity_result)
            bot.send_message(message.chat.id, '–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0, –Ω–æ –º–µ–Ω—å—à–µ 6\n'
                                              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ü§ß')
    else:
        bot.set_state(message.from_user.id, Info.quantity_result)
        bot.send_message(message.chat.id, '–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —è–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º\n'
                                          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ü§ß')


@bot.message_handler(state=Info.min_price)
def check_quantity_hotels(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ bestdeal, –ø–æ–ª—É—á–∞–µ—Ç –º–∏–Ω —Ü–µ–Ω—É, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç.
    –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∞–∫—Å —Ü–µ–Ω—É.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ—Ç–µ–ª—è)
    """
    min_price = message.text
    if min_price.isdigit():
        if int(min_price) > 0:
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['min_price'] = min_price
            bot.send_message(message.chat.id, '–û–ö, —Ç–µ–ø–µ—Ä—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (<u>–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö $</u>) üòÅ',
                             parse_mode='html')
            bot.set_state(message.from_user.id, Info.max_price)
        else:
            bot.set_state(message.from_user.id, Info.min_price)
            bot.send_message(message.chat.id, '–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0\n'
                                              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ü§ß')
    else:
        bot.set_state(message.from_user.id, Info.min_price)
        bot.send_message(message.chat.id, '–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —è–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º\n'
                                          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ü§ß')


@bot.message_handler(state=Info.max_price)
def check_quantity_hotels(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ bestdeal, –ø–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Å —Ü–µ–Ω—É, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç.
    –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –æ—Ç–µ–ª—è)
    """
    max_price = message.text
    if max_price.isdigit():
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            if int(data['min_price']) < int(max_price) > 0:
                data['max_price'] = max_price
                bot.send_message(message.chat.id, 'C—É–ø–µ—Ä, —Ç–µ–ø–µ—Ä—å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ <u>–≤ –∫–º</u>‚ò∫Ô∏è',
                                 parse_mode='html')
                bot.set_state(message.from_user.id, Info.min_distance_to_center)
            else:
                bot.set_state(message.from_user.id, Info.max_price)
                bot.send_message(message.chat.id, '–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ {limit}\n'
                                                  '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ü§ß'.format(limit=data['min_price']))
    else:
        bot.set_state(message.from_user.id, Info.max_price)
        bot.send_message(message.chat.id, '–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —è–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º\n'
                                          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ü§ß')


@bot.message_handler(state=Info.min_distance_to_center)
def check_quantity_hotels(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ bestdeal, –ø–æ–ª—É—á–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç.
    –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ)
    """
    min_distance = message.text
    if min_distance.isdigit():
        if int(min_distance) > -1:
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['min_distance'] = min_distance
            bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞ <u>–≤ –∫–º</u> ‚ò∫Ô∏è',
                             parse_mode='html')
            bot.set_state(message.from_user.id, Info.max_distance_to_center)
        else:
            bot.set_state(message.from_user.id, Info.min_distance_to_center)
            bot.send_message(message.chat.id, '–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –ª–∏–±–æ —Ä–∞–≤–Ω–æ 0\n'
                                              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ü§ß')
    else:
        bot.set_state(message.from_user.id, Info.min_distance_to_center)
        bot.send_message(message.chat.id, '–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —è–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º\n'
                                          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ü§ß')


@bot.message_handler(state=Info.max_distance_to_center)
def check_quantity_hotels(message: Message) -> None:
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ bestdeal, –ø–æ–ª—É—á–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç.
    –°–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π.
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ)
    """
    max_distance = message.text
    if max_distance.isdigit():
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            if int(data['min_distance']) < int(max_distance) > -1:

                data['max_distance'] = max_distance
                bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ –æ—Ç–µ–ª–µ–π —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å?\n'
                                                  '–û—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å <b>–Ω–µ –±–æ–ª—å—à–µ 5</b>', reply_markup=button_hotels(),
                                 parse_mode='html')
                bot.set_state(message.from_user.id, Info.quantity_result)
            else:
                bot.set_state(message.from_user.id, Info.max_distance_to_center)
                bot.send_message(message.chat.id, '–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ {limit}\n'
                                                  '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ü§ß'.format(limit=data['min_distance']))
    else:
        bot.set_state(message.from_user.id, Info.max_distance_to_center)
        bot.send_message(message.chat.id, '–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —è–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º\n'
                                          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ü§ß')


@bot.message_handler(state=Info.photo)
def check_photo(message: Message) -> None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–≥–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ.
    –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç (–¥–∞) —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª-–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.
    –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç (–Ω–µ—Ç) —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞.
    :param message: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –µ–º—É –≤—ã–≤–µ—Å—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏(–¥–∞/–Ω–µ—Ç)
    """
    if message.text.title().startswith('–î–∞'):
        bot.send_message(message.chat.id, '–°–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å –Ω–∞ –æ–¥–∏–Ω –æ—Ç–µ–ª—å\n'
                                          '<b>–Ω–µ –±–æ–ª—å—à–µ 4 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 2</b>',
                         reply_markup=button_quantity_photo(), parse_mode='html')
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['photo'] = True
        bot.set_state(message.from_user.id, Info.quantity_photo)
    elif message.text.title().startswith('–ù–µ—Ç'):
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            data['photo'] = False
            data['quantity_photo'] = 0
        calendar, step = DetailedTelegramCalendar(calendar_id=1, min_date=date.today()).build()
        bot.send_message(message.chat.id, '–ù–µ—Ç, —Ç–∞–∫ –Ω–µ—Ç üòï')
        bot.send_message(message.chat.id, 'üìÜ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞', reply_markup=calendar)
    else:
        bot.set_state(message.from_user.id, Info.photo)
        bot.send_message(message.chat.id, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é –æ—Ç–≤–µ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –≤–∏–¥–∞:\n'
                                          r'–î–∞\–ù–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É', reply_markup=button_photo())


@bot.message_handler(state=Info.quantity_photo)
def check_quantity_photo(message: Message) -> None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —á–∏—Å–ª–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞.
    :param message: —á–∏—Å–ª–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    """

    number = message.text
    if number.isdigit():
        if 5 > int(number) > 1:
            calendar, step = DetailedTelegramCalendar(calendar_id=1, min_date=date.today()).build()
            with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
                data['quantity_photo'] = number
            bot.send_message(message.chat.id, 'üìÜ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞', reply_markup=calendar)
        else:
            bot.set_state(message.from_user.id, Info.quantity_photo)
            bot.send_message(message.chat.id, '–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 1, –Ω–æ –º–µ–Ω—å—à–µ 4\n'
                                              '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ü§ß')
    else:
        bot.set_state(message.from_user.id, Info.quantity_photo)
        bot.send_message(message.chat.id, '–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω —è–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–º\n'
                                          '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ ü§ß')


@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=1))
def take_data_in(callback) -> None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –∑–∞–µ–∑–¥–∞, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –¥–∞—Ç—É –æ—Ç—ä–µ–∑–¥–∞.
    :param callback: –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    """

    result, key, step = DetailedTelegramCalendar(calendar_id=1,  min_date=date.today()).process(callback.data)
    if not result and key:
        bot.edit_message_text("üìÜ –í—ã–±–µ—Ä–∏—Ç–µ {}".format(LSTEP[step]),
                              callback.message.chat.id,
                              callback.message.message_id,
                              reply_markup=key)
    elif result:
        with bot.retrieve_data(callback.from_user.id, callback.message.chat.id) as data:
            data['data_in'] = result
        bot.edit_message_text("–¢–≤–æ–π –≤—ã–±–æ—Ä {}".format(result),
                              callback.message.chat.id,
                              callback.message.message_id)
        min_out_date = data['data_in'] + timedelta(days=1)
        calendar, step = DetailedTelegramCalendar(calendar_id=2, min_date=min_out_date).build()
        bot.send_message(callback.message.chat.id, 'üìÜ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –¥–∞—Ç—É –æ—Ç—ä–µ–∑–¥–∞', reply_markup=calendar)


@bot.callback_query_handler(func=DetailedTelegramCalendar.func(calendar_id=2))
def take_data_out(callback) -> None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –æ—Ç—ä–µ–∑–¥–∞, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –µ–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç.
    –í—ã–≤–æ–¥–∏—Ç –æ—Ç–µ–ª–∏.
    :param callback: –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    """
    with bot.retrieve_data(callback.from_user.id, callback.message.chat.id) as data:
        min_out_date = data['data_in'] + timedelta(days=1)
    result, key, step = DetailedTelegramCalendar(calendar_id=2, min_date=min_out_date).process(callback.data)
    if not result and key:
        bot.edit_message_text("üìÜ –í—ã–±–µ—Ä–∏—Ç–µ {}".format(LSTEP[step]),
                              callback.message.chat.id,
                              callback.message.message_id,
                              reply_markup=key)
    elif result:
        with bot.retrieve_data(callback.from_user.id, callback.message.chat.id) as data:
            data['data_out'] = result
        bot.edit_message_text("–¢–≤–æ–π –≤—ã–±–æ—Ä {}".format(result),
                              callback.message.chat.id,
                              callback.message.message_id)
        bot.delete_state(callback.from_user.id, callback.message.chat.id)

        bot.send_message(callback.message.chat.id, 'C—É–ø–µ—Ä, —Å–µ–π—á–∞—Å –ø–æ–∫–∞–∂—É –æ—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –ø–æ–¥–æ–π–¥—É—Ç!')
        querystring = {"destinationId": data['city_id'],
                       "pageNumber": "1", "pageSize": data['quantity_hotels'],
                       "checkIn": str(data['data_in']), "checkOut": str(data['data_out']),
                       "adults1": "1", "sortOrder": data['filter'], "locale": "ru_RU", "currency": "USD"}
        if data['filter'] == "DISTANCE_FROM_LANDMARK":
            querystring["priceMin"] = data['min_price']
            querystring["priceMax"] = data['max_price']

        total_answer(parameters=querystring, callback=callback, photo=data['photo'], count_photo=data['quantity_photo'])


@logger.catch
def total_answer(parameters: dict, callback: CallbackQuery, photo, count_photo) -> None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤–µ—Å—å —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ –≤—ã–≤–æ–¥–∏—Ç –æ—Ç–µ–ª–∏, –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å—Å—è –ª–∏ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω–æ–µ
    –∫–æ–ª-–≤–æ –æ—Ç–µ–ª–µ–π, –∏ –≤—ã–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–∂–¥–æ–º –∏–∑ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.
    :param parameters: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è property_request
    :param callback: –∫–æ–ª–ª–±–µ–∫ –ø—Ä–æ—à–ª–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.
    :param photo: –Ω—É–∂–Ω–æ –ª–∏ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–µ—Ç.
    :param count_photo: –∫–æ–ª-–≤–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    """
    hotels = found_hotels(querystring=parameters)
    if not hotels or len(hotels) == 0:
        bot.send_message(callback.message.chat.id, '–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –æ—Ç–µ–ª–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º, '
                                                   '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–º–µ–Ω—è–≤ –¥–∞–Ω–Ω—ã–µ')
        return
    elif len(hotels) < int(parameters['pageSize']):
        bot.send_message(callback.message.chat.id, '–≠—Ç–æ –≤—Å–µ, —á—Ç–æ –º—ã —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –¥–ª—è —Ç–µ–±—è')
    elif len(hotels) == int(parameters['pageSize']):
        bot.send_message(callback.message.chat.id, '–í–æ—Ç –æ—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –ø–æ–¥–æ–π–¥—É—Ç')
    for hotel in hotels:

        if photo:
            bot.send_media_group(callback.message.chat.id, take_photo(hotel['hotel_id'], count_photo))
        bot.send_message(callback.message.chat.id, 'üìù –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ç–µ–ª—è: {name}\n'
                                                   'üöï –ê–¥—Ä–µc: {address}\n'
                                                   'üë£ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {center}\n'
                                                   'üí∏ –¶–µ–Ω–∞ –∑–∞ –Ω–æ—á—å:{price}\n'
                                                   'üíµ {total_price}'.format(
                                                    name=hotel['hotel_name'], address=hotel['address'],
                                                    center=hotel['center_distance'], price=hotel['price'],
                                                    total_price=hotel['total_price']),
                         reply_markup=url_markup(hotel['url']))
